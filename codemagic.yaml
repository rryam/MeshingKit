definitions:
  triggering:
    push: &events
      events:
        - push
        - pull_request
      notify:
        success: true
        failure: true

workflows:
  meshingkit:
    name: MeshingKit Workflow
    environment:
      xcode: 26.0
      vars:
        XCODE_SCHEME: "MeshingKit"
        APP_ID: "MeshingKit"
    when:
      changeset:
        includes:
          - 'Sources'
          - 'Tests'
          - 'Package.swift'
          - '*.swift'
    triggering:
      <<: *events
    scripts:
      - name: Build Swift Package
        script: |
          #!/bin/zsh

          echo "Building MeshingKit..."

          # Basic swift build for the current platform
          swift build --target MeshingKit

      - name: Test Swift Package
        script: |
          #!/bin/zsh

          echo "Testing MeshingKit..."

          # Run tests with verbose output
          swift test --verbose

          # Generate code coverage report
          swift test --enable-code-coverage

      - name: Build with Xcode (Multi-Platform)
        script: |
          #!/bin/zss

          declare -a DESTINATIONS=(
            "platform=iOS Simulator,name=iPhone 15"
            "platform=watchOS Simulator,name=Apple Watch Ultra 2 (49mm)"
            "platform=tvOS Simulator,name=Apple TV 4K (3rd generation)"
            "platform=macOS"
            "platform=visionOS Simulator,name=Apple Vision Pro"
          )

          for DESTINATION in "${DESTINATIONS[@]}"
            do
              echo "Building for destination: $DESTINATION"
              xcodebuild clean build \
                -scheme "$XCODE_SCHEME" \
                -destination "$DESTINATION" \
                -skipPackagePluginValidation \
                -quiet
          done

      - name: Validate Package
        script: |
          #!/bin/zsh

          echo "Validating Swift package..."

          # Validate package manifest
          swift package validate

          # Resolve dependencies
          swift package resolve

          # Check for outdated dependencies
          swift package update --what-is-new || true

          echo "Package validation complete!"

      - name: Documentation Check
        script: |
          #!/bin/zss

          echo "Checking documentation..."

          # Generate documentation if docc plugin is available
          if swift package plugin --list | grep -q "Swift-DocC"; then
            echo "Swift-DocC plugin found, generating documentation..."
            swift package generate-documentation
          else
            echo "Swift-DocC plugin not found, skipping documentation generation"
          fi

          echo "Documentation check complete!"

      
    artifacts:
      - build/**/outputs/**/*.txt
      - build/**/reports/**/*.xml
      - build/reports/**/*.xml